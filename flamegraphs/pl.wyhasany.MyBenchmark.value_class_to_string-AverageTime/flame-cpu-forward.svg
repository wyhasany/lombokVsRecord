<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1061"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1061"> </text>
<g id="frames">
<g>
<title>all (4,073 samples, 100.00%)</title><rect x="10.0" y="1027.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1038.0">all</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.02%)</title><rect x="10.0" y="1011.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1022.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.02%)</title><rect x="10.0" y="995.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1006.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.02%)</title><rect x="10.0" y="979.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="990.0"></text>
</g>
<g>
<title>ObjAllocator::initialize(HeapWordImpl**) const (1 samples, 0.02%)</title><rect x="10.0" y="963.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="974.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.37%)</title><rect x="10.3" y="1011.0" width="4.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.3" y="1022.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.07%)</title><rect x="10.3" y="995.0" width="0.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.3" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.07%)</title><rect x="10.3" y="979.0" width="0.9" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="13.3" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.07%)</title><rect x="10.3" y="963.0" width="0.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="13.3" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.07%)</title><rect x="10.3" y="947.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="13.3" y="958.0"></text>
</g>
<g>
<title>do_futex (3 samples, 0.07%)</title><rect x="10.3" y="931.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="13.3" y="942.0"></text>
</g>
<g>
<title>futex_wake (3 samples, 0.07%)</title><rect x="10.3" y="915.0" width="0.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="13.3" y="926.0"></text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.05%)</title><rect x="10.3" y="899.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="13.3" y="910.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (2 samples, 0.05%)</title><rect x="10.3" y="883.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="13.3" y="894.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="10.9" y="899.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="13.9" y="910.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="10.9" y="883.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="13.9" y="894.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="10.9" y="867.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="13.9" y="878.0"></text>
</g>
<g>
<title>_int_free (1 samples, 0.02%)</title><rect x="11.2" y="995.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="14.2" y="1006.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (10 samples, 0.25%)</title><rect x="11.4" y="995.0" width="2.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="14.4" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.25%)</title><rect x="11.4" y="979.0" width="2.9" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="14.4" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.25%)</title><rect x="11.4" y="963.0" width="2.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="14.4" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (10 samples, 0.25%)</title><rect x="11.4" y="947.0" width="2.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="14.4" y="958.0"></text>
</g>
<g>
<title>do_futex (10 samples, 0.25%)</title><rect x="11.4" y="931.0" width="2.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="14.4" y="942.0"></text>
</g>
<g>
<title>futex_wait (10 samples, 0.25%)</title><rect x="11.4" y="915.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="14.4" y="926.0"></text>
</g>
<g>
<title>futex_wait_setup (7 samples, 0.17%)</title><rect x="11.7" y="899.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="14.7" y="910.0"></text>
</g>
<g>
<title>_raw_spin_lock (3 samples, 0.07%)</title><rect x="12.9" y="883.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="15.9" y="894.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (3 samples, 0.07%)</title><rect x="12.9" y="867.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>plist_add (2 samples, 0.05%)</title><rect x="13.8" y="899.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="16.8" y="910.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.02%)</title><rect x="14.3" y="995.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="17.3" y="1006.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="14.3" y="979.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="17.3" y="990.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="14.3" y="963.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="17.3" y="974.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="14.3" y="947.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="17.3" y="958.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="14.3" y="931.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="17.3" y="942.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.02%)</title><rect x="14.3" y="915.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="17.3" y="926.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.02%)</title><rect x="14.3" y="899.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="17.3" y="910.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="14.3" y="883.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="17.3" y="894.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.02%)</title><rect x="14.3" y="867.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>__clock_gettime_2 (3 samples, 0.07%)</title><rect x="14.6" y="1011.0" width="0.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="17.6" y="1022.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.05%)</title><rect x="14.9" y="995.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.9" y="1006.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.05%)</title><rect x="14.9" y="979.0" width="0.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="17.9" y="990.0"></text>
</g>
<g>
<title>__pthread_cond_broadcast (1 samples, 0.02%)</title><rect x="15.5" y="1011.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="18.5" y="1022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="15.5" y="995.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="18.5" y="1006.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="15.5" y="979.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="18.5" y="990.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="15.5" y="963.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="18.5" y="974.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="15.5" y="947.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="18.5" y="958.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="15.5" y="931.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="18.5" y="942.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="15.5" y="915.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="18.5" y="926.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="15.5" y="899.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="18.5" y="910.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="15.5" y="883.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="18.5" y="894.0"></text>
</g>
<g>
<title>_int_malloc (2 samples, 0.05%)</title><rect x="15.8" y="1011.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="18.8" y="1022.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3,971 samples, 97.50%)</title><rect x="16.4" y="1011.0" width="1150.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="19.4" y="1022.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (3,971 samples, 97.50%)</title><rect x="16.4" y="995.0" width="1150.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="19.4" y="1006.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (3,971 samples, 97.50%)</title><rect x="16.4" y="979.0" width="1150.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="19.4" y="990.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (3,971 samples, 97.50%)</title><rect x="16.4" y="963.0" width="1150.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="19.4" y="974.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (3,971 samples, 97.50%)</title><rect x="16.4" y="947.0" width="1150.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="19.4" y="958.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (3,971 samples, 97.50%)</title><rect x="16.4" y="931.0" width="1150.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="19.4" y="942.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (3,971 samples, 97.50%)</title><rect x="16.4" y="915.0" width="1150.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.4" y="926.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call (3,971 samples, 97.50%)</title><rect x="16.4" y="899.0" width="1150.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="19.4" y="910.0">org/openjdk/jmh/runner/BenchmarkHandler$BenchmarkTask.call</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3,971 samples, 97.50%)</title><rect x="16.4" y="883.0" width="1150.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="19.4" y="894.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3,971 samples, 97.50%)</title><rect x="16.4" y="867.0" width="1150.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="19.4" y="878.0">jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (3,971 samples, 97.50%)</title><rect x="16.4" y="851.0" width="1150.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="19.4" y="862.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (3,971 samples, 97.50%)</title><rect x="16.4" y="835.0" width="1150.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="19.4" y="846.0">jdk/internal/reflect/NativeMethodAccessorImpl.invoke0</text>
</g>
<g>
<title>pl/wyhasany/jmh_generated/MyBenchmark_value_class_to_string_jmhTest.value_class_to_string_AverageTime (3,971 samples, 97.50%)</title><rect x="16.4" y="819.0" width="1150.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.4" y="830.0">pl/wyhasany/jmh_generated/MyBenchmark_value_class_to_string_jmhTest.value_class_to_string_AverageTime</text>
</g>
<g>
<title>pl/wyhasany/jmh_generated/MyBenchmark_value_class_to_string_jmhTest.value_class_to_string_avgt_jmhStub (3,971 samples, 97.50%)</title><rect x="16.4" y="803.0" width="1150.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="19.4" y="814.0">pl/wyhasany/jmh_generated/MyBenchmark_value_class_to_string_jmhTest.value_class_to_string_avgt_jmhStub</text>
</g>
<g>
<title>jbyte_arraycopy (31 samples, 0.76%)</title><rect x="134.6" y="787.0" width="9.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="137.6" y="798.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (248 samples, 6.09%)</title><rect x="143.6" y="787.0" width="71.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="146.6" y="798.0">jbyte_di..</text>
</g>
<g>
<title>org/openjdk/jmh/infra/Blackhole.consume (372 samples, 9.13%)</title><rect x="215.4" y="787.0" width="107.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="218.4" y="798.0">org/openjdk/j..</text>
</g>
<g>
<title>pl/wyhasany/MyBenchmark.value_class_to_string (2,912 samples, 71.50%)</title><rect x="323.2" y="787.0" width="843.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="326.2" y="798.0">pl/wyhasany/MyBenchmark.value_class_to_string</text>
</g>
<g>
<title>pl/wyhasany/ValueClass.toString (2,912 samples, 71.50%)</title><rect x="323.2" y="771.0" width="843.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="326.2" y="782.0">pl/wyhasany/ValueClass.toString</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,912 samples, 71.50%)</title><rect x="323.2" y="755.0" width="843.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="326.2" y="766.0">java/lang/invoke/Invokers$Holder.linkToTargetMethod</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800c2a400.invoke (1,459 samples, 35.82%)</title><rect x="585.1" y="739.0" width="422.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="588.1" y="750.0">java/lang/invoke/LambdaForm$MH.0x0000000800c2a400.invoke</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (263 samples, 6.46%)</title><rect x="585.7" y="723.0" width="76.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="588.7" y="734.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (46 samples, 1.13%)</title><rect x="590.0" y="707.0" width="13.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="593.0" y="718.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.05%)</title><rect x="602.8" y="691.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.8" y="702.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.05%)</title><rect x="602.8" y="675.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="605.8" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="602.8" y="659.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="605.8" y="670.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title><rect x="602.8" y="643.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="605.8" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.05%)</title><rect x="602.8" y="627.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="605.8" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.05%)</title><rect x="602.8" y="611.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="605.8" y="622.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.02%)</title><rect x="602.8" y="595.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="605.8" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool, unsigned int) (1 samples, 0.02%)</title><rect x="602.8" y="579.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="605.8" y="590.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool, unsigned int) (1 samples, 0.02%)</title><rect x="602.8" y="563.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="605.8" y="574.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int) (1 samples, 0.02%)</title><rect x="602.8" y="547.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="605.8" y="558.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.02%)</title><rect x="603.0" y="595.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="606.0" y="606.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_eden_size() (1 samples, 0.02%)</title><rect x="603.0" y="579.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="606.0" y="590.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.stringOf (202 samples, 4.96%)</title><rect x="603.3" y="707.0" width="58.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="606.3" y="718.0">java/l..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800c09800.invoke (330 samples, 8.10%)</title><rect x="661.9" y="723.0" width="95.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.9" y="734.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (330 samples, 8.10%)</title><rect x="661.9" y="707.0" width="95.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="664.9" y="718.0">java/lang/i..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (261 samples, 6.41%)</title><rect x="681.8" y="691.0" width="75.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="684.8" y="702.0">java/lan..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (241 samples, 5.92%)</title><rect x="687.6" y="675.0" width="69.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="690.6" y="686.0">java/la..</text>
</g>
<g>
<title>java/lang/String.getBytes (32 samples, 0.79%)</title><rect x="705.3" y="659.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="708.3" y="670.0"></text>
</g>
<g>
<title>java/lang/String.length (148 samples, 3.63%)</title><rect x="714.6" y="659.0" width="42.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="717.6" y="670.0">java..</text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.02%)</title><rect x="757.2" y="643.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="760.2" y="654.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.02%)</title><rect x="757.2" y="627.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="760.2" y="638.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.02%)</title><rect x="757.2" y="611.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="760.2" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800c0a800.invoke (288 samples, 7.07%)</title><rect x="757.5" y="723.0" width="83.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="760.5" y="734.0">java/lang..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (288 samples, 7.07%)</title><rect x="757.5" y="707.0" width="83.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="760.5" y="718.0">java/lang..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.mix (288 samples, 7.07%)</title><rect x="757.5" y="691.0" width="83.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="760.5" y="702.0">java/lang..</text>
</g>
<g>
<title>java/lang/String.length (232 samples, 5.70%)</title><rect x="772.8" y="675.0" width="67.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="775.8" y="686.0">java/la..</text>
</g>
<g>
<title>java/lang/String.coder (46 samples, 1.13%)</title><rect x="826.7" y="659.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="829.7" y="670.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.checkOverflow (3 samples, 0.07%)</title><rect x="840.0" y="675.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.0" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x0000000800c29800.invoke (576 samples, 14.14%)</title><rect x="840.9" y="723.0" width="166.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="843.9" y="734.0">java/lang/invoke/Lamb..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (537 samples, 13.18%)</title><rect x="852.2" y="707.0" width="155.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.2" y="718.0">java/lang/invoke/Dir..</text>
</g>
<g>
<title>java/lang/StringConcatHelper.newArrayWithSuffix (537 samples, 13.18%)</title><rect x="852.2" y="691.0" width="155.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="855.2" y="702.0">java/lang/StringConc..</text>
</g>
<g>
<title>java/lang/String.getBytes (324 samples, 7.95%)</title><rect x="862.9" y="675.0" width="93.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="865.9" y="686.0">java/lang/S..</text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.12%)</title><rect x="876.0" y="659.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="879.0" y="670.0"></text>
</g>
<g>
<title>jbyte_arraycopy (46 samples, 1.13%)</title><rect x="877.4" y="659.0" width="13.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="880.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (228 samples, 5.60%)</title><rect x="890.7" y="659.0" width="66.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="893.7" y="670.0">jbyte_d..</text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.05%)</title><rect x="956.8" y="675.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="959.8" y="686.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newArray (174 samples, 4.27%)</title><rect x="957.4" y="675.0" width="50.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="960.4" y="686.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (90 samples, 2.21%)</title><rect x="981.7" y="659.0" width="26.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="984.7" y="670.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.17%)</title><rect x="1005.2" y="643.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1008.2" y="654.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.17%)</title><rect x="1005.2" y="627.0" width="2.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.2" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (6 samples, 0.15%)</title><rect x="1005.5" y="611.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1008.5" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.15%)</title><rect x="1005.5" y="595.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1008.5" y="606.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::retire_before_allocation() (1 samples, 0.02%)</title><rect x="1005.5" y="579.0" width="0.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1008.5" y="590.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (1 samples, 0.02%)</title><rect x="1005.5" y="563.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1008.5" y="574.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (5 samples, 0.12%)</title><rect x="1005.7" y="579.0" width="1.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1008.7" y="590.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (2 samples, 0.05%)</title><rect x="1007.2" y="643.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1010.2" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (495 samples, 12.15%)</title><rect x="1007.8" y="739.0" width="143.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="1010.8" y="750.0">jbyte_disjoint_arr..</text>
</g>
<g>
<title>org/openjdk/jmh/infra/Blackhole.consume (54 samples, 1.33%)</title><rect x="1151.2" y="739.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1154.2" y="750.0"></text>
</g>
<g>
<title>start_thread (80 samples, 1.96%)</title><rect x="1166.8" y="1011.0" width="23.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1169.8" y="1022.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (80 samples, 1.96%)</title><rect x="1166.8" y="995.0" width="23.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1169.8" y="1006.0">t..</text>
</g>
<g>
<title>Thread::call_run() (80 samples, 1.96%)</title><rect x="1166.8" y="979.0" width="23.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="990.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (70 samples, 1.72%)</title><rect x="1166.8" y="963.0" width="20.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1169.8" y="974.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (21 samples, 0.52%)</title><rect x="1166.8" y="947.0" width="6.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.8" y="958.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int) (7 samples, 0.17%)</title><rect x="1166.8" y="931.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1169.8" y="942.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (7 samples, 0.17%)</title><rect x="1166.8" y="915.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.8" y="926.0"></text>
</g>
<g>
<title>G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet&lt;OverflowTaskQueue&lt;ScannerTask, (MEMFLAGS)5, 131072u&gt;, (MEMFLAGS)5&gt;*) (1 samples, 0.02%)</title><rect x="1166.8" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1169.8" y="910.0"></text>
</g>
<g>
<title>G1Policy::phase_times() const (1 samples, 0.02%)</title><rect x="1167.1" y="899.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.1" y="910.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.02%)</title><rect x="1167.4" y="899.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1170.4" y="910.0"></text>
</g>
<g>
<title>TaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.02%)</title><rect x="1167.7" y="899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1170.7" y="910.0"></text>
</g>
<g>
<title>__lll_lock_wait (1 samples, 0.02%)</title><rect x="1167.7" y="883.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1170.7" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1167.7" y="867.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1170.7" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1167.7" y="851.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1170.7" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1167.7" y="835.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1170.7" y="846.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1167.7" y="819.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1170.7" y="830.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.02%)</title><rect x="1167.7" y="803.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1170.7" y="814.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.02%)</title><rect x="1167.7" y="787.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1170.7" y="798.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.02%)</title><rect x="1167.7" y="771.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1170.7" y="782.0"></text>
</g>
<g>
<title>native_queued_spin_lock_slowpath (1 samples, 0.02%)</title><rect x="1167.7" y="755.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1170.7" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="1168.0" y="899.0" width="0.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1171.0" y="910.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1168.6" y="883.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1171.6" y="894.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1168.6" y="867.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1171.6" y="878.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1168.6" y="851.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1171.6" y="862.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1168.6" y="835.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1171.6" y="846.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1168.6" y="819.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1171.6" y="830.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="1168.6" y="803.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1171.6" y="814.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.12%)</title><rect x="1168.9" y="931.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.9" y="942.0"></text>
</g>
<g>
<title>G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool) (1 samples, 0.02%)</title><rect x="1168.9" y="915.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1171.9" y="926.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.10%)</title><rect x="1169.1" y="915.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1172.1" y="926.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.02%)</title><rect x="1169.1" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1172.1" y="910.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.05%)</title><rect x="1169.4" y="899.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="910.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (2 samples, 0.05%)</title><rect x="1169.4" y="883.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1172.4" y="894.0"></text>
</g>
<g>
<title>JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0] (1 samples, 0.02%)</title><rect x="1169.4" y="867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1172.4" y="878.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool, bool) (1 samples, 0.02%)</title><rect x="1169.4" y="851.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title><rect x="1169.4" y="835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1172.4" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title><rect x="1169.4" y="819.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1172.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title><rect x="1169.7" y="867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1172.7" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.02%)</title><rect x="1170.0" y="899.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1173.0" y="910.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int, bool) (1 samples, 0.02%)</title><rect x="1170.0" y="883.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1173.0" y="894.0"></text>
</g>
<g>
<title>G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (9 samples, 0.22%)</title><rect x="1170.3" y="931.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1173.3" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (9 samples, 0.22%)</title><rect x="1170.3" y="915.0" width="2.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.3" y="926.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (8 samples, 0.20%)</title><rect x="1170.3" y="899.0" width="2.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.3" y="910.0"></text>
</g>
<g>
<title>G1ScanCollectionSetRegionClosure::do_heap_region(HeapRegion*) (7 samples, 0.17%)</title><rect x="1170.6" y="883.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1173.6" y="894.0"></text>
</g>
<g>
<title>G1ScanCollectionSetRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title><rect x="1172.6" y="899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.6" y="910.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (16 samples, 0.39%)</title><rect x="1172.9" y="947.0" width="4.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1175.9" y="958.0"></text>
</g>
<g>
<title>G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (16 samples, 0.39%)</title><rect x="1172.9" y="931.0" width="4.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1175.9" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (11 samples, 0.27%)</title><rect x="1172.9" y="915.0" width="3.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1175.9" y="926.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::FreeCSetClosure::do_heap_region(HeapRegion*) (10 samples, 0.25%)</title><rect x="1173.2" y="899.0" width="2.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1176.2" y="910.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool) (8 samples, 0.20%)</title><rect x="1173.8" y="883.0" width="2.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.8" y="894.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (6 samples, 0.15%)</title><rect x="1174.1" y="867.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.1" y="878.0"></text>
</g>
<g>
<title>G1CodeRootSet::clear() (1 samples, 0.02%)</title><rect x="1174.4" y="851.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1177.4" y="862.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (4 samples, 0.10%)</title><rect x="1174.6" y="851.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.6" y="862.0"></text>
</g>
<g>
<title>HeapRegionTracer::send_region_type_change(unsigned int, G1HeapRegionTraceType::Type, G1HeapRegionTraceType::Type, unsigned long, unsigned long) (1 samples, 0.02%)</title><rect x="1175.8" y="867.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.8" y="878.0"></text>
</g>
<g>
<title>HeapRegionClaimer::claim_region(unsigned int) (5 samples, 0.12%)</title><rect x="1176.1" y="915.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1179.1" y="926.0"></text>
</g>
<g>
<title>G1MergeHeapRootsTask::work(unsigned int) (15 samples, 0.37%)</title><rect x="1177.5" y="947.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1180.5" y="958.0"></text>
</g>
<g>
<title>G1CollectedHeap::collection_set_iterate_increment_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) (1 samples, 0.02%)</title><rect x="1177.5" y="931.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.5" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (14 samples, 0.34%)</title><rect x="1177.8" y="931.0" width="4.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.8" y="942.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (4 samples, 0.10%)</title><rect x="1177.8" y="915.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.8" y="926.0"></text>
</g>
<g>
<title>G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(HeapRegion*) (3 samples, 0.07%)</title><rect x="1178.1" y="899.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1181.1" y="910.0"></text>
</g>
<g>
<title>HeapRegionClaimer::claim_region(unsigned int) (10 samples, 0.25%)</title><rect x="1179.0" y="915.0" width="2.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.0" y="926.0"></text>
</g>
<g>
<title>G1PrepareEvacuationTask::work(unsigned int) (14 samples, 0.34%)</title><rect x="1181.9" y="947.0" width="4.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1184.9" y="958.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (14 samples, 0.34%)</title><rect x="1181.9" y="931.0" width="4.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1184.9" y="942.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (3 samples, 0.07%)</title><rect x="1185.9" y="947.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>__memset_avx2_unaligned_erms (2 samples, 0.05%)</title><rect x="1186.2" y="931.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1189.2" y="942.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1186.8" y="947.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1189.8" y="958.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1186.8" y="931.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1189.8" y="942.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1186.8" y="915.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1189.8" y="926.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1186.8" y="899.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1189.8" y="910.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1186.8" y="883.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1189.8" y="894.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1186.8" y="867.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1189.8" y="878.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1186.8" y="851.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1189.8" y="862.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1186.8" y="835.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1189.8" y="846.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="1186.8" y="819.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1189.8" y="830.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (1 samples, 0.02%)</title><rect x="1187.1" y="963.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="974.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.02%)</title><rect x="1187.1" y="947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="958.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.02%)</title><rect x="1187.1" y="931.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="942.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1187.1" y="915.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="926.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (1 samples, 0.02%)</title><rect x="1187.1" y="899.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.1" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="851.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.1" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="819.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="803.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="787.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.1" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="771.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="755.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1190.1" y="766.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="750.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="734.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="707.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="718.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="691.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="702.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="675.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="686.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="659.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="670.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="654.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="638.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="611.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="622.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="595.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.1" y="606.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="579.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="563.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.1" y="574.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="547.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="558.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="531.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1190.1" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="515.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1190.1" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="499.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.1" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="483.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.1" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="467.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="451.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.1" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="435.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="419.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.1" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="387.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="371.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.1" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="339.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.1" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.1" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="307.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="318.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.1" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1190.1" y="286.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="259.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1190.1" y="270.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="254.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.02%)</title><rect x="1187.1" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="238.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.02%)</title><rect x="1187.1" y="211.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.1" y="222.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.02%)</title><rect x="1187.1" y="195.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.1" y="206.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.02%)</title><rect x="1187.1" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.1" y="190.0"></text>
</g>
<g>
<title>LibraryIntrinsic::generate(JVMState*) (1 samples, 0.02%)</title><rect x="1187.1" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="174.0"></text>
</g>
<g>
<title>LibraryCallKit::inline_arraycopy() (1 samples, 0.02%)</title><rect x="1187.1" y="147.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.1" y="158.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.02%)</title><rect x="1187.1" y="131.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.1" y="142.0"></text>
</g>
<g>
<title>CheckCastPPNode::Value(PhaseGVN*) const (1 samples, 0.02%)</title><rect x="1187.1" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1190.1" y="126.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1187.1" y="99.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="110.0"></text>
</g>
<g>
<title>TypeAryPtr::xmeet_helper(Type const*) const (1 samples, 0.02%)</title><rect x="1187.1" y="83.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.1" y="94.0"></text>
</g>
<g>
<title>TypeAry::xmeet(Type const*) const (1 samples, 0.02%)</title><rect x="1187.1" y="67.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.1" y="78.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.02%)</title><rect x="1187.1" y="51.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.1" y="62.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.02%)</title><rect x="1187.1" y="35.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1190.1" y="46.0"></text>
</g>
<g>
<title>VMThread::run() (9 samples, 0.22%)</title><rect x="1187.4" y="963.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="974.0"></text>
</g>
<g>
<title>VMThread::inner_execute(VM_Operation*) (9 samples, 0.22%)</title><rect x="1187.4" y="947.0" width="2.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="958.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.02%)</title><rect x="1187.4" y="931.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.4" y="942.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.02%)</title><rect x="1187.4" y="915.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.4" y="926.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (1 samples, 0.02%)</title><rect x="1187.4" y="899.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.4" y="910.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1187.4" y="883.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1190.4" y="894.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1187.4" y="867.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1190.4" y="878.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1187.4" y="851.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1190.4" y="862.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1187.4" y="835.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1190.4" y="846.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1187.4" y="819.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1190.4" y="830.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1187.4" y="803.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1190.4" y="814.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1187.4" y="787.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1190.4" y="798.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1187.4" y="771.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1190.4" y="782.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="1187.4" y="755.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1190.4" y="766.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (8 samples, 0.20%)</title><rect x="1187.7" y="931.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.7" y="942.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (8 samples, 0.20%)</title><rect x="1187.7" y="915.0" width="2.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.7" y="926.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (8 samples, 0.20%)</title><rect x="1187.7" y="899.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.7" y="910.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (8 samples, 0.20%)</title><rect x="1187.7" y="883.0" width="2.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="894.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint_helper(double) (8 samples, 0.20%)</title><rect x="1187.7" y="867.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet*, bool) (3 samples, 0.07%)</title><rect x="1187.7" y="851.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.7" y="862.0"></text>
</g>
<g>
<title>G1RemSet::merge_heap_roots(bool) (1 samples, 0.02%)</title><rect x="1187.7" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="846.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (1 samples, 0.02%)</title><rect x="1187.7" y="819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1190.7" y="830.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1187.7" y="803.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1190.7" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1187.7" y="787.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1187.7" y="771.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1187.7" y="755.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1190.7" y="766.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1187.7" y="739.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1187.7" y="723.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1190.7" y="734.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1187.7" y="707.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1190.7" y="718.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1187.7" y="691.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1190.7" y="702.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="1187.7" y="675.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1190.7" y="686.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (2 samples, 0.05%)</title><rect x="1188.0" y="835.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1191.0" y="846.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1188.0" y="819.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1191.0" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1188.3" y="803.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1191.3" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1188.3" y="787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1188.3" y="771.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1191.3" y="782.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1188.3" y="755.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1191.3" y="766.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1188.3" y="739.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1191.3" y="750.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="1188.3" y="723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1191.3" y="734.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&amp;, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*) (2 samples, 0.05%)</title><rect x="1188.6" y="851.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.02%)</title><rect x="1188.6" y="835.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1191.6" y="846.0"></text>
</g>
<g>
<title>HeapRegionManager::rebuild_free_list(WorkGang*) (1 samples, 0.02%)</title><rect x="1188.6" y="819.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1191.6" y="830.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (1 samples, 0.02%)</title><rect x="1188.6" y="803.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1191.6" y="814.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.02%)</title><rect x="1188.6" y="787.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.6" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1188.6" y="771.0" width="0.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1191.6" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1188.6" y="755.0" width="0.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1191.6" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1188.6" y="739.0" width="0.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1191.6" y="750.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1188.6" y="723.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1191.6" y="734.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1188.6" y="707.0" width="0.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1191.6" y="718.0"></text>
</g>
<g>
<title>mark_wake_futex (1 samples, 0.02%)</title><rect x="1188.6" y="691.0" width="0.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1191.6" y="702.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::flush() (1 samples, 0.02%)</title><rect x="1188.8" y="835.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1191.8" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::~G1ParScanThreadState() (1 samples, 0.02%)</title><rect x="1188.8" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.05%)</title><rect x="1189.1" y="851.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="862.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (2 samples, 0.05%)</title><rect x="1189.1" y="835.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.1" y="846.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.05%)</title><rect x="1189.1" y="819.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1192.1" y="830.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.02%)</title><rect x="1189.4" y="803.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.4" y="814.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.02%)</title><rect x="1189.4" y="787.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1192.4" y="798.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.02%)</title><rect x="1189.4" y="771.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1192.4" y="782.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.02%)</title><rect x="1189.4" y="755.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1192.4" y="766.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.02%)</title><rect x="1189.4" y="739.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1192.4" y="750.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.02%)</title><rect x="1189.4" y="723.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.02%)</title><rect x="1189.4" y="707.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1192.4" y="718.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.02%)</title><rect x="1189.4" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1192.4" y="702.0"></text>
</g>
<g>
<title>WeakProcessorPhaseTimes::reset() (1 samples, 0.02%)</title><rect x="1189.7" y="851.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.7" y="862.0"></text>
</g>
</g>
</svg>

